<?php
/*
 * Copyright (c) 2016 - 2021 - Eighty / 20 Results by Wicked Strong Chicks.
 * ALL RIGHTS RESERVED
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace E20R\Tests\Unit;

use Codeception\TestCase\WPTestCase;
use E20R\Utilities\Loader;
use E20R\Utilities\Utilities;
use Mockery\Adapter\Phpunit\MockeryPHPUnitIntegration;
use Brain\Monkey;
use Brain\Monkey\Functions;
use Brain\Monkey\Filters;
use Brain\Monkey\Actions;

class Loader_WPUnitTest extends WPTestCase {

	use MockeryPHPUnitIntegration;

	private $m_utils = null;

	protected function setUp(): void {
		parent::setUp();
		Monkey\setUp();

		$this->loadMocks();
	}

	protected function tearDown(): void {
		Monkey\tearDown();
		parent::tearDown(); // TODO: Change the autogenerated stub
	}

	/**
	 * Classes that can be mocked for the entire test
	 */
	public function loadMocks() {
		try {
			$this->m_utils = $this->makeEmpty(
				Utilities::class,
				array(
					'load_text_domain' => null,
					'configure_update' => null,
					'dummy_function'   => null,
				)
			);
		} catch ( \Exception $e ) {
			// phpcs:ignore WordPress.PHP.DevelopmentFunctions.error_log_error_log
			error_log( $e->getMessage() );
		}
	}

	/**
	 * Unit test for the Loader() class instantiation
	 * @param mixed $expected
	 *
	 * @dataProvider fixture_instantiated
	 */
	public function test__construct( $action_list, $expected ) {
		$loader = new Loader();

		foreach ( $action_list as $action_definition ) {
			list( $action_name, $hook_function ) = $action_definition;
			$result                              = has_action( $action_name, $hook_function );
			self::assertSame( $expected, $result );
		}
	}

	/**
	 * Fixture for the Loader() class constructor test
	 * @return \string[][]
	 */
	public function fixture_instantiated() {
		return array(
			array(
				array( 'plugins_loaded', array( new Loader(), 'utilities_loaded' ) ),
				-1,
			),
			array(
				array( 'plugins_loaded', array( Utilities::get_instance(), 'load_text_domain' ) ),
				-1,
			),
			array(
				array( 'init', array( $this->m_utils, 'dummy_function' ) ),
				false,
			),
		);
	}


	/**
	 * @param $test_value
	 * @param $expected
	 *
	 * @dataProvider fixture_utilities_loaded
	 * @covers \E20R\Utilities\Loader::utilities_loaded
	 */
	public function test_utilities_loaded( $test_value, $expected ) {
		$loader = new Loader();
		$loader->utilities_loaded();
		Filters\has( 'e20r_utilities_module_installed', '__return_true' );
		$result = apply_filters( 'e20r_utilities_module_installed', $test_value );
		self::assertSame( $expected, $result );
	}

	/**
	 * Fixture for the test_utilities_loaded unit test
	 *
	 * @return array
	 */
	public function fixture_utilities_loaded() {
		return array(
			array( false, true ),
			array( true, true ),
		);
	}
}
